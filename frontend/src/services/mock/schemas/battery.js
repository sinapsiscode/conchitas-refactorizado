import { generateUUID } from '../../../utils/uuid.js'

export const BatterySchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  sectorId: {
    type: 'string',
    required: true
  },
  letter: {
    type: 'string',
    required: true,
    minLength: 1,
    maxLength: 1,
    validate: (value) => /^[A-Z]$/.test(value) // Solo letras mayúsculas A-Z
  },
  name: {
    type: 'string',
    required: true,
    maxLength: 100
  },
  description: {
    type: 'string',
    required: false,
    maxLength: 500
  },
  status: {
    type: 'string',
    required: true,
    enum: ['active', 'inactive', 'maintenance'],
    default: 'active'
  },
  // Metadatos útiles
  totalLines: {
    type: 'number',
    required: false,
    default: 0,
    min: 0
  },
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  updatedAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  }
}

export const validateBattery = (data) => {
  const errors = []

  const autoGeneratedFields = ['id', 'createdAt', 'updatedAt', 'status', 'totalLines']

  for (const [field, rules] of Object.entries(BatterySchema)) {
    const value = data[field]

    if (rules.required && !autoGeneratedFields.includes(field) && (!value && value !== 0)) {
      errors.push(`${field} es requerido`)
    }

    if (value !== undefined && value !== null) {
      if (rules.type === 'string') {
        if (typeof value !== 'string') {
          errors.push(`${field} debe ser texto`)
        } else {
          if (rules.minLength && value.length < rules.minLength) {
            errors.push(`${field} debe tener al menos ${rules.minLength} caracteres`)
          }
          if (rules.maxLength && value.length > rules.maxLength) {
            errors.push(`${field} debe tener máximo ${rules.maxLength} caracteres`)
          }
        }
      }

      if (rules.type === 'number') {
        const numValue = parseFloat(value)
        if (isNaN(numValue)) {
          errors.push(`${field} debe ser un número válido`)
        } else {
          if (rules.min !== undefined && numValue < rules.min) {
            errors.push(`${field} debe ser mayor o igual a ${rules.min}`)
          }
          if (rules.max !== undefined && numValue > rules.max) {
            errors.push(`${field} debe ser menor o igual a ${rules.max}`)
          }
        }
      }

      if (rules.enum && !rules.enum.includes(value)) {
        errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
      }

      if (rules.validate && !rules.validate(value)) {
        errors.push(`${field} no tiene un formato válido`)
      }
    }
  }

  return errors
}