import { generateUUID } from '../../../utils/uuid.js'

export const UserSchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  email: {
    type: 'string',
    required: true,
    validate: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)
  },
  password: {
    type: 'string',
    required: true,
    minLength: 6
  },
  firstName: {
    type: 'string',
    required: true
  },
  lastName: {
    type: 'string',
    required: true
  },
  role: {
    type: 'string',
    required: true,
    enum: ['maricultor', 'investor']
  },
  status: {
    type: 'string',
    required: true,
    enum: ['pending', 'approved', 'rejected'],
    default: 'pending'
  },
  phone: {
    type: 'string',
    required: false
  },
  location: {
    type: 'string',
    required: false
  },
  totalHectares: {
    type: 'number',
    required: false,
    min: 0
  },
  maricultorId: {
    type: 'string',
    required: false  // Solo requerido para inversores
  },
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  updatedAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  }
}

export const validateUser = (data) => {
  const errors = []
  
  // Campos que se generan autom치ticamente en el servidor
  const autoGeneratedFields = ['id', 'createdAt', 'updatedAt']
  
  for (const [field, rules] of Object.entries(UserSchema)) {
    // Saltar validaci칩n de campos generados autom치ticamente
    if (autoGeneratedFields.includes(field)) {
      continue
    }
    
    const value = data[field]
    
    if (rules.required && (!value || value === '')) {
      errors.push(`${field} es requerido`)
    }
    
    if (value && rules.validate && !rules.validate(value)) {
      errors.push(`${field} no tiene un formato v치lido`)
    }
    
    if (value && rules.minLength && value.length < rules.minLength) {
      errors.push(`${field} debe tener al menos ${rules.minLength} caracteres`)
    }
    
    if (value && rules.enum && !rules.enum.includes(value)) {
      errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
    }
    
    if (typeof value === 'number' && rules.min !== undefined && value < rules.min) {
      errors.push(`${field} debe ser mayor o igual a ${rules.min}`)
    }
  }
  
  return errors
}