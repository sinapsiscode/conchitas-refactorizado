import { generateUUID } from '../../../utils/uuid.js'

export const DistributionSchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  harvestPlanId: {
    type: 'string',
    required: true
  },
  lotId: {
    type: 'string',
    required: true
  },
  maricultorId: {
    type: 'string',
    required: true
  },
  investmentId: {
    type: 'string',
    required: true
  },
  investorId: {
    type: 'string',
    required: true
  },
  distributionDate: {
    type: 'string',
    required: true,
    validate: (value) => !isNaN(new Date(value).getTime())
  },
  // Financial details
  harvestRevenue: {
    type: 'number',
    required: true,
    min: 0
  },
  harvestExpenses: {
    type: 'number',
    required: true,
    min: 0
  },
  netProfit: {
    type: 'number',
    required: true
  },
  investmentPercentage: {
    type: 'number',
    required: true,
    min: 0,
    max: 100
  },
  distributedAmount: {
    type: 'number',
    required: true,
    min: 0
  },
  // ROI Calculation
  originalInvestment: {
    type: 'number',
    required: true,
    min: 0
  },
  roi: {
    type: 'number',
    required: true
  },
  // Status tracking
  status: {
    type: 'string',
    required: true,
    enum: ['pending', 'paid', 'cancelled'],
    default: 'pending'
  },
  paymentMethod: {
    type: 'string',
    required: false,
    enum: ['bank_transfer', 'cash', 'check', 'other']
  },
  paymentDate: {
    type: 'string',
    required: false,
    validate: (value) => !value || !isNaN(new Date(value).getTime())
  },
  paymentReference: {
    type: 'string',
    required: false
  },
  notes: {
    type: 'string',
    required: false
  },
  // Metadata
  metadata: {
    type: 'object',
    required: false,
    default: {}
  },
  // Audit fields
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  updatedAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  createdBy: {
    type: 'string',
    required: false
  }
}

export const validateDistribution = (data) => {
  const errors = []
  
  // Skip auto-generated fields
  const autoGeneratedFields = ['id', 'createdAt', 'updatedAt']
  
  for (const [field, rules] of Object.entries(DistributionSchema)) {
    if (autoGeneratedFields.includes(field)) {
      continue
    }
    
    const value = data[field]
    
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`${field} es requerido`)
    }
    
    if (value !== undefined && value !== null && rules.validate && !rules.validate(value)) {
      errors.push(`${field} no tiene un formato v√°lido`)
    }
    
    if (typeof value === 'number' && rules.min !== undefined && value < rules.min) {
      errors.push(`${field} debe ser mayor o igual a ${rules.min}`)
    }
    
    if (typeof value === 'number' && rules.max !== undefined && value > rules.max) {
      errors.push(`${field} debe ser menor o igual a ${rules.max}`)
    }
    
    if (value && rules.enum && !rules.enum.includes(value)) {
      errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
    }
  }
  
  return errors
}