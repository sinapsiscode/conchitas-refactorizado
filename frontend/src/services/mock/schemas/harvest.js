import { generateUUID } from '../../../utils/uuid.js'

export const HarvestPlanSchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  sectorId: {
    type: 'string',
    required: true
  },
  lotId: {
    type: 'string',
    required: true
  },
  plannedDate: {
    type: 'string',
    required: true,
    validate: (value) => !isNaN(new Date(value).getTime())
  },
  actualDate: {
    type: 'string',
    required: false
  },
  status: {
    type: 'string',
    required: true,
    enum: ['planning', 'planned', 'in_progress', 'completed', 'cancelled'],
    default: 'planning'
  },
  // Fase de Planificación
  estimatedQuantity: {
    type: 'number',
    required: true,
    min: 0
  },
  estimatedMortality: {
    type: 'number',
    required: false,
    min: 0,
    max: 100
  },
  plannedCosts: {
    type: 'object',
    required: false
  },
  inventoryToUse: {
    type: 'array',
    required: false
  },
  // Fase de Ejecución
  actualQuantity: {
    type: 'number',
    required: false,
    min: 0
  },
  actualMortality: {
    type: 'number',
    required: false,
    min: 0,
    max: 100
  },
  actualCosts: {
    type: 'object',
    required: false
  },
  sizeDistribution: {
    type: 'object',
    required: false
  },
  manojos: {
    type: 'number',
    required: false,
    min: 0
  },
  costPerManojo: {
    type: 'number',
    required: false,
    min: 0
  },
  notes: {
    type: 'string',
    required: false
  },
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  updatedAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  }
}

export const PricingSchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  sizeCategory: {
    type: 'string',
    required: true,
    enum: ['XS', 'S', 'M', 'L', 'XL']
  },
  minSize: {
    type: 'number',
    required: true,
    min: 0
  },
  maxSize: {
    type: 'number',
    required: true,
    min: 0
  },
  pricePerUnit: {
    type: 'number',
    required: true,
    min: 0
  },
  pricePerManojo: {
    type: 'number',
    required: true,
    min: 0
  },
  isActive: {
    type: 'boolean',
    required: true,
    default: true
  },
  effectiveDate: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString().split('T')[0]
  },
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  }
}

export const validateHarvestPlan = (data) => {
  const errors = []
  
  // Campos que se generan automáticamente en el servidor
  const autoGeneratedFields = ['id', 'createdAt', 'updatedAt']
  
  for (const [field, rules] of Object.entries(HarvestPlanSchema)) {
    // Saltar validación de campos generados automáticamente
    if (autoGeneratedFields.includes(field)) {
      continue
    }
    
    const value = data[field]
    
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`${field} es requerido`)
    }
    
    if (value !== undefined && value !== null && rules.validate && !rules.validate(value)) {
      errors.push(`${field} no tiene un formato válido`)
    }
    
    if (typeof value === 'number' && rules.min !== undefined && value < rules.min) {
      errors.push(`${field} debe ser mayor o igual a ${rules.min}`)
    }
    
    if (value && rules.enum && !rules.enum.includes(value)) {
      errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
    }
  }
  
  return errors
}

export const HarvestCostCategorySchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  name: {
    type: 'string',
    required: true
  },
  description: {
    type: 'string',
    required: false
  },
  unit: {
    type: 'string',
    required: true,
    enum: ['unit', 'day', 'trip', 'kg', 'hour', 'fixed']
  },
  estimatedCost: {
    type: 'number',
    required: true,
    min: 0
  },
  isActive: {
    type: 'boolean',
    required: true,
    default: true
  }
}

export const validatePricing = (data) => {
  const errors = []
  
  for (const [field, rules] of Object.entries(PricingSchema)) {
    const value = data[field]
    
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`${field} es requerido`)
    }
    
    if (typeof value === 'number' && rules.min !== undefined && value < rules.min) {
      errors.push(`${field} debe ser mayor o igual a ${rules.min}`)
    }
    
    if (value && rules.enum && !rules.enum.includes(value)) {
      errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
    }
  }
  
  if (data.minSize >= data.maxSize) {
    errors.push('El tamaño mínimo debe ser menor que el tamaño máximo')
  }
  
  return errors
}