import { generateUUID } from '../../../utils/uuid.js'

export const ExpenseSchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  lotId: {
    type: 'string',
    required: false
  },
  sectorId: {
    type: 'string',
    required: false
  },
  category: {
    type: 'string',
    required: true,
    enum: ['operational', 'harvest', 'material', 'maintenance', 'other']
  },
  type: {
    type: 'string',
    required: true
  },
  description: {
    type: 'string',
    required: true
  },
  amount: {
    type: 'number',
    required: true,
    min: 0
  },
  date: {
    type: 'string',
    required: true,
    validate: (value) => !isNaN(new Date(value).getTime())
  },
  isRecurring: {
    type: 'boolean',
    required: false,
    default: false
  },
  frequency: {
    type: 'string',
    required: false,
    enum: ['daily', 'weekly', 'monthly', 'yearly']
  },
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  updatedAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  }
}

// MIGRADO A DB.JSON - Usar API: GET /expenseTypes
export const ExpenseTypeSchema = {}
/* Datos movidos a db.json:
{
  operational: [
    { id: 'vigilante_salary', name: 'Sueldo de vigilante', defaultAmount: 300 },
    { id: 'vigilante_maintenance', name: 'Mantenimiento del vigilante', defaultAmount: 300 },
    { id: 'waste_collection', name: 'Pago de recojo por residuos', defaultAmount: 0 }
  ],
  harvest: [
    { id: 'nets', name: 'Mallas', defaultAmount: 0 },
    { id: 'plant_processing', name: 'Planta (procesamiento)', defaultAmount: 0 },
    { id: 'divers', name: 'Buzos', defaultAmount: 0 },
    { id: 'boats', name: 'Embarcaciones', defaultAmount: 0 },
    { id: 'ice', name: 'Hielo', defaultAmount: 0 },
    { id: 'net_labels', name: 'Etiqueta para malla', defaultAmount: 0 }
  ],
  material: [
    { id: 'buoys_national', name: 'Boyas nacionales', defaultAmount: 120 },
    { id: 'buoys_imported', name: 'Boyas importadas', defaultAmount: 45 },
    { id: 'lines', name: 'Líneas', defaultAmount: 0 },
    { id: 'bottom_system', name: 'Sistema de fondo', defaultAmount: 0 },
    { id: 'suspended_system', name: 'Sistema suspendido', defaultAmount: 0 }
  ]
}
*/

export const validateExpense = (data) => {
  const errors = []
  
  // Campos que se generan automáticamente en el servidor
  const autoGeneratedFields = ['id', 'createdAt', 'updatedAt']
  
  for (const [field, rules] of Object.entries(ExpenseSchema)) {
    // Saltar validación de campos generados automáticamente
    if (autoGeneratedFields.includes(field)) {
      continue
    }
    
    const value = data[field]
    
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`${field} es requerido`)
    }
    
    if (value !== undefined && value !== null && rules.validate && !rules.validate(value)) {
      errors.push(`${field} no tiene un formato válido`)
    }
    
    if (typeof value === 'number' && rules.min !== undefined && value < rules.min) {
      errors.push(`${field} debe ser mayor o igual a ${rules.min}`)
    }
    
    // Para category, permitir categorías personalizadas (no solo las del enum)
    if (field === 'category') {
      // No validar contra enum para permitir categorías personalizadas
      continue
    }
    
    if (value && rules.enum && !rules.enum.includes(value)) {
      errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
    }
  }
  
  // Validación especial para lotId cuando es 'company_expenses'
  if (data.lotId === 'company_expenses') {
    // Es válido, no agregar errores
  }
  
  if (data.isRecurring && !data.frequency) {
    errors.push('La frecuencia es requerida para gastos recurrentes')
  }
  
  return errors
}