import { generateUUID } from '../../../utils/uuid.js'

export const IncomeRecordSchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  userId: {
    type: 'string',
    required: true
  },
  harvestPlanId: {
    type: 'string',
    required: true
  },
  sectorId: {
    type: 'string',
    required: true
  },
  lotId: {
    type: 'string',
    required: true
  },
  date: {
    type: 'string',
    required: true,
    validate: (value) => !isNaN(new Date(value).getTime())
  },
  type: {
    type: 'string',
    required: true,
    enum: ['harvest_sale', 'manual_income'],
    default: 'harvest_sale'
  },
  description: {
    type: 'string',
    required: true
  },
  quantity: {
    type: 'number',
    required: true,
    min: 0
  },
  sizeDistribution: {
    type: 'object',
    required: false
  },
  presentationDistribution: {
    type: 'object',
    required: false
  },
  weightKg: {
    type: 'number',
    required: false,
    min: 0
  },
  unitAnalysis: {
    type: 'object',
    required: false,
    default: () => ({
      manojos: 0,
      mallas: 0,
      conchitas: 0,
      pricePerManojo: 0,
      pricePerMalla: 0,
      pricePerConchita: 0
    })
  },
  totalAmount: {
    type: 'number',
    required: true,
    min: 0
  },
  currency: {
    type: 'string',
    required: true,
    enum: ['PEN', 'USD'],
    default: 'PEN'
  },
  status: {
    type: 'string',
    required: true,
    enum: ['pending', 'confirmed', 'paid'],
    default: 'confirmed'
  },
  notes: {
    type: 'string',
    required: false
  },
  metadata: {
    type: 'object',
    required: false
  },
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  updatedAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  }
}

export const validateIncomeRecord = (data) => {
  const errors = []
  
  // Campos que se generan autom치ticamente en el servidor
  const autoGeneratedFields = ['id', 'createdAt', 'updatedAt']
  
  for (const [field, rules] of Object.entries(IncomeRecordSchema)) {
    // Saltar validaci칩n de campos generados autom치ticamente
    if (autoGeneratedFields.includes(field)) {
      continue
    }
    
    const value = data[field]
    
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`${field} es requerido`)
    }
    
    if (value !== undefined && value !== null && rules.validate && !rules.validate(value)) {
      errors.push(`${field} no tiene un formato v치lido`)
    }
    
    if (typeof value === 'number' && rules.min !== undefined && value < rules.min) {
      errors.push(`${field} debe ser mayor o igual a ${rules.min}`)
    }
    
    if (value && rules.enum && !rules.enum.includes(value)) {
      errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
    }
  }
  
  return errors
}