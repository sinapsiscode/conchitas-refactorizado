import { generateUUID } from '../../../utils/uuid.js'

export const NotificationSchema = {
  id: {
    type: 'string',
    required: true,
    default: () => generateUUID()
  },
  userId: {
    type: 'string',
    required: true
  },
  type: {
    type: 'string',
    required: true,
    enum: [
      'distribution_received',  // Retorno distribuido
      'harvest_completed',      // Cosecha completada
      'harvest_upcoming',        // Cosecha próxima
      'investment_accepted',     // Inversión aceptada
      'mortality_alert',         // Alerta de mortalidad
      'new_monitoring',          // Nuevo monitoreo registrado
      'lot_status_change',       // Cambio de estado del lote
      'payment_received',        // Pago recibido
      'investment_invitation_received',  // Invitación recibida (para inversor)
      'investment_invitation_accepted',  // Invitación aceptada (para maricultor)
      'investment_invitation_rejected',  // Invitación rechazada (para maricultor)
      'investment_invitation_cancelled', // Invitación cancelada (para inversor)
      'system'                   // Notificación del sistema
    ]
  },
  title: {
    type: 'string',
    required: true
  },
  message: {
    type: 'string',
    required: true
  },
  priority: {
    type: 'string',
    required: true,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium'
  },
  status: {
    type: 'string',
    required: true,
    enum: ['unread', 'read', 'archived'],
    default: 'unread'
  },
  // Related entities
  relatedEntity: {
    type: 'string',
    required: false,
    enum: ['investment', 'harvest', 'lot', 'distribution', 'monitoring']
  },
  relatedEntityId: {
    type: 'string',
    required: false
  },
  // Action link
  actionUrl: {
    type: 'string',
    required: false
  },
  actionText: {
    type: 'string',
    required: false
  },
  // Metadata for specific notification types
  metadata: {
    type: 'object',
    required: false,
    default: {}
  },
  // Timestamps
  createdAt: {
    type: 'string',
    required: true,
    default: () => new Date().toISOString()
  },
  readAt: {
    type: 'string',
    required: false,
    validate: (value) => !value || !isNaN(new Date(value).getTime())
  },
  expiresAt: {
    type: 'string',
    required: false,
    validate: (value) => !value || !isNaN(new Date(value).getTime())
  }
}

export const validateNotification = (data) => {
  const errors = []
  
  const autoGeneratedFields = ['id', 'createdAt']
  
  for (const [field, rules] of Object.entries(NotificationSchema)) {
    if (autoGeneratedFields.includes(field)) {
      continue
    }
    
    const value = data[field]
    
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`${field} es requerido`)
    }
    
    if (value !== undefined && value !== null && rules.validate && !rules.validate(value)) {
      errors.push(`${field} no tiene un formato válido`)
    }
    
    if (value && rules.enum && !rules.enum.includes(value)) {
      errors.push(`${field} debe ser uno de: ${rules.enum.join(', ')}`)
    }
  }
  
  return errors
}

// Helper to create notification from templates
export const createNotificationFromTemplate = (type, userId, data = {}) => {
  const templates = {
    distribution_received: {
      title: 'Retorno Distribuido',
      message: `Has recibido un retorno de S/ ${data.amount?.toFixed(2) || '0.00'} de la cosecha ${data.harvestId || ''}`,
      priority: 'high',
      relatedEntity: 'distribution',
      relatedEntityId: data.distributionId
    },
    harvest_completed: {
      title: 'Cosecha Completada',
      message: `La cosecha del lote ${data.lotName || ''} ha sido completada exitosamente`,
      priority: 'high',
      relatedEntity: 'harvest',
      relatedEntityId: data.harvestId
    },
    harvest_upcoming: {
      title: 'Cosecha Próxima',
      message: `La cosecha del lote ${data.lotName || ''} está programada para ${data.date || ''}`,
      priority: 'medium',
      relatedEntity: 'harvest',
      relatedEntityId: data.harvestId
    },
    investment_accepted: {
      title: 'Inversión Aceptada',
      message: `Tu inversión de S/ ${data.amount?.toFixed(2) || '0.00'} en ${data.lotName || ''} ha sido aceptada`,
      priority: 'high',
      relatedEntity: 'investment',
      relatedEntityId: data.investmentId
    },
    mortality_alert: {
      title: 'Alerta de Mortalidad',
      message: `Se ha detectado una mortalidad del ${data.percentage || '0'}% en el lote ${data.lotName || ''}`,
      priority: 'urgent',
      relatedEntity: 'lot',
      relatedEntityId: data.lotId
    },
    new_monitoring: {
      title: 'Nuevo Monitoreo',
      message: `Se ha registrado un nuevo monitoreo para el lote ${data.lotName || ''}`,
      priority: 'low',
      relatedEntity: 'monitoring',
      relatedEntityId: data.monitoringId
    },
    lot_status_change: {
      title: 'Cambio de Estado',
      message: `El lote ${data.lotName || ''} ha cambiado de estado a ${data.newStatus || ''}`,
      priority: 'medium',
      relatedEntity: 'lot',
      relatedEntityId: data.lotId
    },
    payment_received: {
      title: 'Pago Recibido',
      message: `Se ha recibido un pago de S/ ${data.amount?.toFixed(2) || '0.00'}`,
      priority: 'high',
      metadata: data
    },
    investment_invitation_received: {
      title: 'Invitación de Inversión',
      message: `${data.maricultorName || 'Un maricultor'} te ha invitado a invertir en su proyecto en ${data.sectorName || 'un sector'}`,
      priority: 'high',
      relatedEntity: 'invitation',
      relatedEntityId: data.invitationId
    },
    investment_invitation_accepted: {
      title: 'Invitación Aceptada',
      message: `${data.investorName || 'El inversor'} ha aceptado tu invitación para invertir en ${data.sectorName || 'el proyecto'}`,
      priority: 'high',
      relatedEntity: 'invitation',
      relatedEntityId: data.invitationId
    },
    investment_invitation_rejected: {
      title: 'Invitación Rechazada',
      message: `${data.investorName || 'El inversor'} ha rechazado tu invitación para invertir en ${data.sectorName || 'el proyecto'}`,
      priority: 'medium',
      relatedEntity: 'invitation',
      relatedEntityId: data.invitationId
    },
    investment_invitation_cancelled: {
      title: 'Invitación Cancelada',
      message: `${data.maricultorName || 'El maricultor'} ha cancelado la invitación de inversión para ${data.sectorName || 'el proyecto'}`,
      priority: 'medium',
      relatedEntity: 'invitation',
      relatedEntityId: data.invitationId
    },
    system: {
      title: data.title || 'Notificación del Sistema',
      message: data.message || '',
      priority: data.priority || 'low'
    }
  }
  
  const template = templates[type]
  if (!template) {
    throw new Error(`Template de notificación no encontrado: ${type}`)
  }
  
  return {
    userId,
    type,
    ...template,
    metadata: data,
    status: 'unread',
    createdAt: new Date().toISOString()
  }
}